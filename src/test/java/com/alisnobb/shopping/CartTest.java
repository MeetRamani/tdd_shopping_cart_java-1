/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.alisnobb.shopping;

import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.junit.Assert.*;
import java.util.*;

public class CartTest {

    private Cart cart = new Cart();

    Logger logger = LoggerFactory.getLogger(getClass());

    @Test
    public void testForInitialStateOfTheCart(){
    logger.info("Size of the Cart at the beginning is --> {}",cart.getCart().size());
    assertEquals("verifying if the cart is Empty", 0, cart.getCart().size());
    }

    @Test
    public void testToGetTheListOfAllItems(){
        Item item1 = new Item().withName("HandBag").withPrice(20.0f).withOnSale(false);
        Item item2 = new Item().withName("Watch").withPrice(10.0f).withOnSale(true);
        cart.addItem(item1, 2);
        cart.addItem(item2, 4);

        cart.getItems().forEach(item -> logger.info("Item added to the Cart {}", item));
        assertEquals("Verifying number of Items in the Cart", 2, cart.getItems().size());
    }

    @Test
    public void testToGetTheTotalPriceOfAllTheItemsInTheCart(){
        Item item = new Item().withName("HandBag").withPrice(20.0f).withOnSale(false);
        cart.addItem(item, 2);

        logger.info("Total price of all the items in the Cart --> {}",cart.getTotalPrice());
        assertTrue("Verifying the price of all the Items in the cart", 40.0f == cart.getTotalPrice());
    }

    @Test
    public void testToShowTheItemQuantitiesThathaveBeenAddedToTheCart(){
        Item item1 = new Item().withName("HandBag").withPrice(20.0f).withOnSale(false);
        Item item2 = new Item().withName("Watch").withPrice(10.0f).withOnSale(true);
        cart.addItem(item1, 2);
        cart.addItem(item2, 4);


        cart.itemQuantities().forEach(item ->  logger.info("Item added to the cart along with it's Quantity {}", item));
        assertTrue("Verifying the Quantity of Item Watch", cart.itemQuantities().contains("Watch - x4"));
        assertTrue("Verifying the Quantity of Item HandBag", cart.itemQuantities().contains("HandBag - x2"));
    }


    @Test
    public void testToShowTheItemizedList(){
        Item item1 = new Item().withName("HandBag").withPrice(500.0f).withOnSale(false);
        Item item2 = new Item().withName("Watch").withPrice(20000.0f).withOnSale(true);
        cart.addItem(item1, 1);
        cart.addItem(item2, 2);

        cart.itemizedList().forEach(item ->  logger.info("Item added to the cart along with it's price and Quantity {}", item));
        assertTrue("Verifying the Quantity and TotalPrice of Item Watch", cart.itemizedList().contains("Watch x2 - $40,000.00"));
        assertTrue("Verifying the Quantity and TotalPrice of Item HandBag", cart.itemizedList().contains("HandBag x1 - $500.00"));
    }

    @Test
    public void testForOnSaleItems(){
        Item item1 = new Item().withName("HandBag").withPrice(250.0f).withOnSale(true);
        Item item2 = new Item().withName("Watch").withPrice(10000.0f).withOnSale(true);
        Item item3 = new Item().withName("Manga").withPrice(100.0f).withOnSale(false);
        cart.addItem(item1, 1);
        cart.addItem(item2, 2);
        cart.addItem(item3, 3);

        cart.onSaleItems().forEach(item ->  logger.info("Item added to the cart which is on sale {}", item));
        assertTrue("Verifying the Quantity and TotalPrice of Item Watch which is onSale", cart.itemizedList().contains("Watch x2 - $20,000.00"));
        assertTrue("Verifying the Quantity and TotalPrice of Item HandBag which is onSale", cart.itemizedList().contains("HandBag x1 - $250.00"));
    }
}